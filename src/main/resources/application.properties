# Application properties
application.name=CRM
application.host=localhost:8080
application.support.email=support@crm.ru
application.support.phoneNumber=+X (XXX) XXX-XXXX

application.user.admin.name=admin
application.user.admin.password=111111

# Connection url for the database
# PostgeSql
# spring.datasource.url=jdbc:postgresql://localhost:5432/crm
# MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/crm?useUnicode=yes&characterEncoding=utf8&useSSL=false

# Username and password
spring.datasource.username=${db_username:root}
spring.datasource.password=${db_password:root}

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS

# PostgeSql
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# MySQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect

# Mail properties
spring.mail.host=smtp.gmail.com
spring.mail.port=465
spring.mail.username=${mail_username:test-user}
spring.mail.password=${mail_password:test-password}
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.properties.mail.smtp.ssl.enable = true