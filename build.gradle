import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.4.5"
    }
}

rootProject.version = "0.0.2"
group = "com.spaceshift"

allprojects {

    apply plugin: "groovy"

    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://dl.bintray.com/javasabr/maven"
        }
        maven {
            url "https://dl.bintray.com/jasync-sql/jasync-sql"
        }
    }

    ext {
        angularVersion = "11.0.6"
        annotationVersion = "20.1.0"
        lombokVersion = '1.18.18'
        betterStringVersion = "0.5"
    }

    dependencies {
        compileOnly "org.jetbrains:annotations:$annotationVersion"
        testCompileOnly "org.jetbrains:annotations:$annotationVersion"
    }

    afterEvaluate { Project project ->

        if (project.ext.has("lombok") && project.ext["lombok"] == "true") {
            project.dependencies {
                it.compileOnly "org.projectlombok:lombok:$lombokVersion"
                it.annotationProcessor "org.projectlombok:lombok:$lombokVersion"
                it.testCompileOnly "org.projectlombok:lombok:$lombokVersion"
                it.testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
            }
        }
    
        if (project.ext.has("betterStrings") && project.ext["betterStrings"] == "true") {
            project.dependencies {
                it.compileOnly "com.antkorwin:better-strings:$betterStringVersion"
                it.annotationProcessor "com.antkorwin:better-strings:$betterStringVersion"
                it.testCompileOnly "com.antkorwin:better-strings:$betterStringVersion"
                it.testAnnotationProcessor "com.antkorwin:better-strings:$betterStringVersion"
            }
        }
    }

    sourceSets {
        main {
            java {
                srcDirs 'src/main/groovy'
            }
        }
        test {
            java {
                srcDirs 'src/test/groovy'
            }
        }
    }

    configurations {
        testArtifacts.extendsFrom testImplementation
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    artifacts {
        testArtifacts testJar
    }
    
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
    
    tasks.withType(Test) {
        maxParallelForks = 2
        forkEvery = 100
        jvmArgs += "--enable-preview"
    }
    
    tasks.withType(JavaCompile) {
        options.compilerArgs += ["--enable-preview", "-parameters"]
    }
    
    tasks.withType(GroovyCompile) {
        options.forkOptions.jvmArgs += "--enable-preview"
    }
    
    processResources {
        filter(ReplaceTokens, tokens: [
            
            // USER DB
            'userDbScheme': System.getProperty("userDbScheme", "jcrm-user-db"),
            'userDbHost': System.getProperty("userDbHost", "localhost"),
            'userDbPort': System.getProperty("userDbPort", "5432"),
            'userDbDatabase': System.getProperty("userDbDatabase", "jcrm"),
            'userDbUser': System.getProperty("userDbUser", "postgres"),
            'userDbPassword': System.getProperty("userDbPassword", "root"),

            // DICTIONARY DB
            'dictionaryDbScheme': System.getProperty("dictionaryDbScheme", "jcrm-dictionary-db"),
            'dictionaryDbHost': System.getProperty("dictionaryDbHost", "localhost"),
            'dictionaryDbPort': System.getProperty("dictionaryDbPort", "5432"),
            'dictionaryDbDatabase': System.getProperty("dictionaryDbDatabase", "jcrm"),
            'dictionaryDbUser': System.getProperty("dictionaryDbUser", "postgres"),
            'dictionaryDbPassword': System.getProperty("dictionaryDbPassword", "root"),

            // CLIENT DB
            'clientDbScheme': System.getProperty("clientDbScheme", "jcrm-client-db"),
            'clientDbHost': System.getProperty("clientDbHost", "localhost"),
            'clientDbPort': System.getProperty("clientDbPort", "5432"),
            'clientDbDatabase': System.getProperty("clientDbDatabase", "jcrm"),
            'clientDbUser': System.getProperty("clientDbUser", "postgres"),
            'clientDbPassword': System.getProperty("clientDbPassword", "root"),
            
            // SECURITY
            'securityTokenSecretKey': System.getProperty("securityTokenSecretKey", "7e9f81de588c09edd3f2dd5e3a0397344b659b1aa54024cfde1fa2527ffe57818c059b2a1df89b52427e06a60714093609fa9087414d42c779e71822fec33079"),
            
            // EMAL
            'mailUser': System.getProperty("mailUser", ""),
            'mailPassword': System.getProperty("mailPassword", ""),
            'mailFrom': System.getProperty("mailFrom", ""),
            
            // SSL
            'keystorePath': System.getProperty("keystorePath", projectDir.toPath().resolve("../jcrm.p12").toString()),
            'keystorePassword': System.getProperty("keystorePassword", "ssljcrm"),
            'keystoreAlias': System.getProperty("keystoreAlias", "jcrm"),
        ])
    }
}

task buildSingleArtifact(type: GradleBuild) {
    group = 'build'
    description = 'Build all modules -> Build result artifact'
    tasks = ['build', 'bootJar']
}

task buildSingleArtifactWithoutTests(type: GradleBuild) {
    group = 'build'
    description = 'Build all modules without tests -> Build result artifact'
    tasks = ['classes', 'bootJar']
}

wrapper {
    gradleVersion = '7.0'
    distributionType = Wrapper.DistributionType.ALL
}
